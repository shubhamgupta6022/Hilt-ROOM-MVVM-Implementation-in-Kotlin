plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id("dagger.hilt.android.plugin")
}

apply from: "$rootDir/dependencies.gradle"

android {
    compileSdk 32

    defaultConfig {
        applicationId "com.example.hilt"
        minSdk versions.minSdk
        targetSdk versions.targetSdk
        versionCode versions.versionCode
        versionName versions.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        kapt {
            arguments {
                arg("room.schemaLocation", "$projectDir/schemas")
            }
        }
    }

    def BASE_URL = "BASE_URL"
    flavorDimensions "dev", "minSdk"
    productFlavors {
        free {
            dimension "dev"
            applicationIdSuffix ".free"
            buildConfigField "String", BASE_URL, '"https://freeServer.com"'
        }
        paid {
            dimension "dev"
            applicationIdSuffix ".paid"
            buildConfigField "String", BASE_URL, '"https://paidServer.com"'
        }
        minSdk30 {
            dimension "minSdk"
            minSdk 30
        }
        minSdk21 {
            dimension "minSdk"
            minSdk 21
        }
    }

//    variantFliter { variant ->
//        def names = variant.flavors*.name
//        if (names.contains("free")) {
//            // Gradle ignores any variants that satisfy the conditions above.
//            setIgnore(true)
//        }
//    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        customDebug {
            initWith debug
            applicationIdSuffix ".customDebug"
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    buildFeatures {
        viewBinding true
        dataBinding true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    def roomVersion = "$versions.roomVersion"

    implementation "androidx.core:core-ktx:$versions.ktxVersion"
    implementation "androidx.appcompat:appcompat:$versions.appCompact"
    implementation "com.google.android.material:material:$versions.materialVersion"
    implementation "androidx.constraintlayout:constraintlayout:$versions.constraintLayoutVersion"
    testImplementation "junit:junit:$versions.junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$versions.junitExtVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$versions.espressoCoreVersion"
    implementation "androidx.recyclerview:recyclerview:$versions.recyclerViewVersion"
    implementation "androidx.cardview:cardview:$versions.cardViewVersion"

    //DataBinding
    implementation "androidx.databinding:databinding-runtime:$versions.dataBindingVersion"
    //Room Database
    implementation("androidx.room:room-runtime:$roomVersion")
    kapt("androidx.room:room-compiler:$roomVersion")
    annotationProcessor("androidx.room:room-compiler:$roomVersion")
    implementation("androidx.room:room-ktx:$roomVersion")
    //For ViewModelScope
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$versions.coroutinesVersion"
    //For LifecycleScope
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$versions.coroutinesVersion"
    //For liveData
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$versions.coroutinesVersion"
    //For Hilt
    implementation("com.google.dagger:hilt-android:$versions.hiltVersion")
    kapt("com.google.dagger:hilt-android-compiler:$versions.hiltVersion")
    //ViewModels delegation extensions for activity
    implementation "androidx.activity:activity-ktx:$versions.viewModelActivityKtx"
    ////RxAndroid
    implementation "io.reactivex.rxjava3:rxandroid:$versions.rxandroidVersion"
    // Because RxAndroid releases are few and far between, it is recommended you also
    // explicitly depend on RxJava's latest version for bug fixes and new features.
    // (see https://github.com/ReactiveX/RxJava/releases for latest 3.x.x version)
    implementation "io.reactivex.rxjava3:rxjava:$versions.rxjava3Version"
    //RxJava
    implementation "io.reactivex.rxjava3:rxjava:$versions.rxjava3Version"
    implementation "androidx.room:room-rxjava3:$roomVersion"
    //RxJava adapter
    implementation "com.github.akarnokd:rxjava3-retrofit-adapter:$versions.retrofitAdapterVersion"
    //retrofit
    implementation "com.google.code.gson:gson:$versions.gsonVersion"
    implementation "com.squareup.retrofit2:retrofit:$versions.retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$versions.retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava:$versions.rxjavaAdapterVersion"

    //glide
    implementation "com.github.bumptech.glide:glide:$versions.glideVersion"
}

kapt {
    correctErrorTypes = true
}